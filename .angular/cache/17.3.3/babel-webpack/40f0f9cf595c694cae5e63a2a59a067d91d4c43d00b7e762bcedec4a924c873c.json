{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let GlobalService = /*#__PURE__*/(() => {\n  var _GlobalService;\n  class GlobalService {\n    constructor() {\n      // private _godMode: boolean = false;\n      this.globalVars = {\n        godMode: false,\n        test: 123,\n        test2: true\n        // Add more global variables here as needed\n      };\n      window.openHiddenTerminal = this.openHiddenTerminal.bind(this);\n    }\n    // get godMode(): boolean {\n    //   return this._godMode;\n    // }\n    // set godMode(value: boolean) {\n    //   this._godMode = value;\n    // }\n    openHiddenTerminal() {\n      const correctPassword = 'Hoth 1775'; // Set your password\n      let passwordAttempts = 0;\n      const maxAttempts = 3; // Maximum password attempts\n      while (passwordAttempts < maxAttempts) {\n        const enteredPassword = prompt('Please enter the password:');\n        if (enteredPassword === null) {\n          // User cancelled the prompt\n          return;\n        } else if (enteredPassword === correctPassword) {\n          break; // Correct password entered, break out of the loop to continue\n        } else {\n          alert('Incorrect password, try again.');\n          passwordAttempts++;\n        }\n      }\n      if (passwordAttempts === maxAttempts) {\n        alert('Maximum password attempts exceeded.');\n        return; // Exit the function if max attempts reached\n      }\n      let running = true;\n      while (running) {\n        let command = prompt(`\nHidden Terminal Commands:\n-------------------------------\n1. View variables\n2. Edit variables\n3. Exit\n-------------------------------\n`);\n        if (command === null) return; // Exit if prompt is cancelled\n        switch (command) {\n          case '1':\n            this.viewVariables();\n            break;\n          case '2':\n            this.editVariables();\n            break;\n          case '3':\n            running = false;\n            break;\n          case 'x':\n            running = false;\n            break;\n          default:\n            alert('Invalid command.');\n            break;\n        }\n      }\n    }\n    viewVariables() {\n      let varsString = 'VARIABLES:\\n-------------------------------\\n';\n      Object.keys(this.globalVars).forEach((key, index) => {\n        varsString += `${index + 1}. ${key} - ${this.globalVars[key]}\\n`;\n      });\n      varsString += '-------------------------------\\n';\n      alert(varsString);\n    }\n    editVariables() {\n      let varsString = 'VARIABLES:\\n-------------------------------\\n';\n      let varKeys = Object.keys(this.globalVars);\n      varKeys.forEach((key, index) => {\n        varsString += `${index + 1}. ${key} - ${this.globalVars[key]}\\n`;\n      });\n      varsString += '-------------------------------\\nSelect one of the variables above by entering the variable\\'s corresponding number.\\nOr press \\'x\\' to exit.\\n-------------------------------';\n      let variableToEdit = prompt(varsString);\n      if (variableToEdit === null || variableToEdit.toLowerCase() === 'x') return; // Exit if prompt is cancelled or 'x' is pressed\n      let index = parseInt(variableToEdit) - 1;\n      if (index >= 0 && index < varKeys.length) {\n        let key = varKeys[index];\n        let newValue = prompt(`You have chosen the variable \"${key}\" to edit.\\nPlease enter \"${key}\"'s new value below and press \"Enter\"\\nonce done to change the variable.\\nOr press 'x' to exit.\\n-------------------------------`);\n        if (newValue === null) return; // Exit if prompt is cancelled\n        // Update the value, assuming all are boolean for simplicity; you might need more complex handling for different types\n        this.globalVars[key] = newValue.toLowerCase() === 'true';\n        alert(`\\n-------------------------------\\nThe variable '${key}' has been successfully changed to ${newValue}!\\n-------------------------------`);\n      } else {\n        alert('\\n-------------------------------\\nInvalid selection.\\n-------------------------------');\n      }\n    }\n  }\n  _GlobalService = GlobalService;\n  _GlobalService.ɵfac = function GlobalService_Factory(t) {\n    return new (t || _GlobalService)();\n  };\n  _GlobalService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _GlobalService,\n    factory: _GlobalService.ɵfac,\n    providedIn: 'root'\n  });\n  return GlobalService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}